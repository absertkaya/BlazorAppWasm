@inherits LayoutComponentBase
<input @bind="filterString" />
<button @onclick="Filter">Filter</button>

<button @onclick="Previous50" disabled="@(filteredProducts.IndexOf(toRenderList[0]) == 0 ? true : false)">-50</button>

<button @onclick="Next50">+50</button>

<table>
    <tr>
        <th>Products</th>
    </tr>
    @foreach (var product in toRenderList)
    {
        <tr>
            <td>
                <ProductComponent @key="@product" Product="@product.Name" />
            </td>
        </tr>
    }
</table>


@code {
    private List<Product> products;
    private List<Product> filteredProducts;
    private IList<Product> toRenderList;
    private string filterString = "";

    protected override void OnInitialized()
    {
        products = new List<Product>();

        for (int i = 0; i < 10000; i++)
        {
            products.Add(new Product(i, "Product " + (i + 1)));
        }

        filteredProducts = new List<Product>(products);
        toRenderList = filteredProducts.GetRange(0, 50);
    }

    private void Filter()
    {
        filteredProducts = products.Where(p => p.Name.Contains(filterString)).ToList();
        toRenderList = filteredProducts.GetRange(0, 50);
    }

    private void Next50()
    {
        try
        {
            toRenderList = filteredProducts.GetRange(filteredProducts.IndexOf(toRenderList[toRenderList.Count - 1]) + 1, 50);
        } catch (Exception ex)
        {
            toRenderList = filteredProducts.GetRange(0, 50);
        }
    }

    private void Previous50()
    {
        try
        {
            toRenderList = filteredProducts.GetRange(filteredProducts.IndexOf(toRenderList[0]) - 50, 50);
        }
        catch (Exception ex)
        {
            toRenderList = filteredProducts.GetRange(filteredProducts.Count - 50, 50);
        }
    }


}
